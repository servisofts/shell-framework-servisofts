#!/bin/bash

me="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"
if [[ "$me" == *"___link___"* ]]; then
    me="${me//___link___/}"
fi

NAME="$me"
VERSION=1.0.0
DEBUG=true
COMPILE_FOLDER="target"
BIN_PATH="/usr/bin"
BIN_LOCAL_PATH="/usr/local/bin"
INSTALATION_PATH="/opt"

DIR_PATH=$(dirname "$0")
for key in ${BASH_SOURCE[@]}; do
    if [[ $key == *"$BIN_PATH"* ]]; then
        continue
    fi
    if [[ $key == *"$BIN_LOCAL_PATH"* ]]; then
        continue
    fi
    DIR_PATH="$key"
    DIR_PATH=$(echo ${DIR_PATH} | perl -nle 'm/(.*)?\/.*/; print $1')
done
#   VARIABLES GLOBALES QUE PUEDEN SER REMPLAZADAS
# COMPROVAMOS SI EXISTE LA ENVFILE y la importamos remplazando los valores
. "$DIR_PATH/$NAME.sfs" &>/dev/null
# echo "$DIR_PATH/$NAME.sfs"
if [ ! -s $ENV_FILE ]; then
    . "$DIR_PATH/$ENV_FILE"
fi

#   VARIABLES GLOBALES QUE NO PUEDEN SER REMPLAZADAS
expresion="m/(.*)?\/.*/; print \$1"
DIR_SFS=$(echo ${BASH_SOURCE[0]} | perl -nle "$expresion")
FOLDER_NAME=${PWD##*/}
FOLDER_NAME=${FOLDER_NAME:-/} # to correct for the case where PWD=/
PARAMS=("$@")
PARAMS_STR=("$*")

# CODE
set -e
include() {
    source "${DIR_SFS}/$1" ${PARAMS[*]}
}
require() {
    source "${DIR_PATH}/$1" ${PARAMS[*]}
}
run_commands() {
    local pos=$2
    local arr=$PARAMS
    local val=${PARAMS[pos]}
    arr_temp=$(JSON ${1} keys)
    for key in $arr_temp; do
        name=$key
        if [[ $name = $val ]]; then
            obj=$(JSON $1 get $key)
            require $obj
            exit
        fi
    done
}

run_options() {
    local pos=$2

    # cantidad_parametros=$((${#PARAMS[@]} - $pos))
    local array_keys=$(JSON ${1} keys)

    local BRANCH_REGEX="-(.*)?#"

    local pending=""
    local pending_params=()

    for ((c = $pos; c < ${#PARAMS[@]}; c++)); do
        local param=${PARAMS[c]}

        if [ -s "$param" ]; then
            continue
        fi

        if [ ! -s $pending ]; then
            pending_params[${pending[1]} - ${pending[0]}]="$param"
            pending[0]=$((${pending[0]} - 1))
            if [ ${pending[0]} = "-1" ]; then
                value=${pending[3]}
                $value ${pending_params[*]}
                pending=""
                pending_params=()
            fi
            continue
        fi
        for _key in ${array_keys[@]}; do

            command=" "
            # echo "$key"
            
            # echo "$_key"

            if [[ $_key =~ $BRANCH_REGEX ]]; then
                command=$(echo $_key | perl -nle "m/(.*)?[#]/; print \$1; ")
                file=$(echo $_key | perl -nle "m/.*?[#](.*)?/; print \$1; ")
            fi
            if [[ $param = $_key ]]; then

                value=$(JSON $1 get $_key)
                $value
            fi
            if [[ "$param" = "$command" ]]; then

                local value=$(JSON $1 get "$_key")
                pending=("$file" "$file" "$command" "$value")
                continue
            fi

        done
    done

    if [ ! -s $pending ]; then
        value=${pending[3]}
        $value ${pending_params[*]}
        pending=""
        pending_params=()
        # exit
    fi
}
export_module() {
    cur_path=$(echo ${BASH_SOURCE[1]/$DIR_PATH/""})
    class_name=$(echo ${BASH_SOURCE[1]##*/})
    if [ "$class_name" = "index" ]; then
        class_name=$(echo ${BASH_SOURCE[1]/$DIR_PATH/""})
        class_name=$(echo ${class_name//"index"/""})
        class_name=$(echo ${class_name##/})
        class_name=$(echo ${class_name%%/})
    fi

    IFS='/' read -ra ADDR <<<"$class_name"

    n=$(echo ${#ADDR[*]})
    n=$(($n - 1))
    # echo $n
    run_commands $1 $n
    run_options $2 $n
}

include "func/index"
include "sconsole/index"
include "JSON/index"
include "shelp/index"

#!/bin/bash

### CLASS FUNCTIONALITY
# echo $NAME
if [[ ! $NAME == "sfs" ]]; then
    return;
fi

JSON commands new
JSON commands put "link" "cmd/link"
JSON commands put "unlink" "cmd/unlink"
JSON commands put "publish" "cmd/publish"
JSON commands put "clean" "cmd/clean"
JSON commands put "repo" "cmd/repo/index"
JSON commands put "install" "cmd/install"
JSON commands put "uninstall" "cmd/uninstall"
JSON commands put "build" "cmd/build/index"
JSON commands put "create" "cmd/create"

JSON options new
JSON options put "-h" "_help"
JSON options put "--help" "_help"
JSON options put '--help' '_help'
# JSON options put "algo" "gos"
JSON options put "-v" "_version"
JSON options put "--version" "_version_large"
# JSON options keys
# JSON options values
_version() {
    sconsole "$VERSION"
    exit 0
}
_version_large() {
    sconsole "$NAME version $VERSION"
    exit 0
}
_help() {
    JSON help_info new
    JSON help_info put "cmd/install" "Instala un packete sfs desde el repositorio."
    JSON help_info put "cmd/build/index" "Compila el proyecto encontrado en la ruta que nos encontramos."
    JSON help_info put "cmd/link" "Crea un link simbolico de del proyecto en el que nos encontramos."
    JSON help_info put "cmd/clean" "Limpiar los archivos de compilacion."
    JSON help_info put "cmd/unlink" "--"
    JSON help_info put "cmd/publish" "--"
    JSON help_info put "cmd/repo/index" "--"
    JSON help_info put "cmd/uninstall" "--"
    JSON help_info put "cmd/create" "Crea un nuevo projecto en el directorio donde nos encontramos."

    JSON help_info put "_help" "Muestra la ayuda."
    JSON help_info put "_version" "Muestra la version de $NAME."
    JSON help_info put "_version_large" "Muestra la version detallada de $NAME."

    shelp commands options help_info ""
    exit 0
}

# _printenv

export_module commands options
